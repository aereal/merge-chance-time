// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aereal/merge-chance-time/domain/repo (interfaces: Repository)

// Package repo is a generated GoMock package.
package repo

import (
	context "context"
	model "github.com/aereal/merge-chance-time/domain/model"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockRepository is a mock of Repository interface
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// DeleteRepositoryConfig mocks base method
func (m *MockRepository) DeleteRepositoryConfig(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRepositoryConfig", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRepositoryConfig indicates an expected call of DeleteRepositoryConfig
func (mr *MockRepositoryMockRecorder) DeleteRepositoryConfig(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRepositoryConfig", reflect.TypeOf((*MockRepository)(nil).DeleteRepositoryConfig), arg0, arg1, arg2)
}

// DeleteRepositoryConfigsByOwner mocks base method
func (m *MockRepository) DeleteRepositoryConfigsByOwner(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRepositoryConfigsByOwner", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRepositoryConfigsByOwner indicates an expected call of DeleteRepositoryConfigsByOwner
func (mr *MockRepositoryMockRecorder) DeleteRepositoryConfigsByOwner(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRepositoryConfigsByOwner", reflect.TypeOf((*MockRepository)(nil).DeleteRepositoryConfigsByOwner), arg0, arg1)
}

// GetRepositoryConfig mocks base method
func (m *MockRepository) GetRepositoryConfig(arg0 context.Context, arg1, arg2 string) (*model.RepositoryConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepositoryConfig", arg0, arg1, arg2)
	ret0, _ := ret[0].(*model.RepositoryConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRepositoryConfig indicates an expected call of GetRepositoryConfig
func (mr *MockRepositoryMockRecorder) GetRepositoryConfig(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepositoryConfig", reflect.TypeOf((*MockRepository)(nil).GetRepositoryConfig), arg0, arg1, arg2)
}

// ListConfigsByOwners mocks base method
func (m *MockRepository) ListConfigsByOwners(arg0 context.Context) (map[string][]*model.RepositoryConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListConfigsByOwners", arg0)
	ret0, _ := ret[0].(map[string][]*model.RepositoryConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListConfigsByOwners indicates an expected call of ListConfigsByOwners
func (mr *MockRepositoryMockRecorder) ListConfigsByOwners(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListConfigsByOwners", reflect.TypeOf((*MockRepository)(nil).ListConfigsByOwners), arg0)
}

// PutRepositoryConfigs mocks base method
func (m *MockRepository) PutRepositoryConfigs(arg0 context.Context, arg1 []*model.RepositoryConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutRepositoryConfigs", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutRepositoryConfigs indicates an expected call of PutRepositoryConfigs
func (mr *MockRepositoryMockRecorder) PutRepositoryConfigs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutRepositoryConfigs", reflect.TypeOf((*MockRepository)(nil).PutRepositoryConfigs), arg0, arg1)
}
