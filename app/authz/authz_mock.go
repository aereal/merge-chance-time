// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aereal/merge-chance-time/app/authz (interfaces: Authorizer)

// Package authz is a generated GoMock package.
package authz

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	http "net/http"
	reflect "reflect"
)

// MockAuthorizer is a mock of Authorizer interface
type MockAuthorizer struct {
	ctrl     *gomock.Controller
	recorder *MockAuthorizerMockRecorder
}

// MockAuthorizerMockRecorder is the mock recorder for MockAuthorizer
type MockAuthorizerMockRecorder struct {
	mock *MockAuthorizer
}

// NewMockAuthorizer creates a new mock instance
func NewMockAuthorizer(ctrl *gomock.Controller) *MockAuthorizer {
	mock := &MockAuthorizer{ctrl: ctrl}
	mock.recorder = &MockAuthorizerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAuthorizer) EXPECT() *MockAuthorizerMockRecorder {
	return m.recorder
}

// GetCurrentClaims mocks base method
func (m *MockAuthorizer) GetCurrentClaims(arg0 context.Context) (*AppClaims, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentClaims", arg0)
	ret0, _ := ret[0].(*AppClaims)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrentClaims indicates an expected call of GetCurrentClaims
func (mr *MockAuthorizerMockRecorder) GetCurrentClaims(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentClaims", reflect.TypeOf((*MockAuthorizer)(nil).GetCurrentClaims), arg0)
}

// IssueAuthenticationToken mocks base method
func (m *MockAuthorizer) IssueAuthenticationToken(arg0 *AppClaims) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IssueAuthenticationToken", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IssueAuthenticationToken indicates an expected call of IssueAuthenticationToken
func (mr *MockAuthorizerMockRecorder) IssueAuthenticationToken(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IssueAuthenticationToken", reflect.TypeOf((*MockAuthorizer)(nil).IssueAuthenticationToken), arg0)
}

// Middleware mocks base method
func (m *MockAuthorizer) Middleware() func(http.Handler) http.Handler {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Middleware")
	ret0, _ := ret[0].(func(http.Handler) http.Handler)
	return ret0
}

// Middleware indicates an expected call of Middleware
func (mr *MockAuthorizerMockRecorder) Middleware() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Middleware", reflect.TypeOf((*MockAuthorizer)(nil).Middleware))
}
