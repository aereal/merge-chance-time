// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aereal/merge-chance-time/app/adapter/githubapps (interfaces: GitHubAppsAdapter)

// Package githubapps is a generated GoMock package.
package githubapps

import (
	context "context"
	reflect "reflect"

	githubapi "github.com/aereal/merge-chance-time/app/adapter/githubapi"
	gomock "github.com/golang/mock/gomock"
)

// MockGitHubAppsAdapter is a mock of GitHubAppsAdapter interface
type MockGitHubAppsAdapter struct {
	ctrl     *gomock.Controller
	recorder *MockGitHubAppsAdapterMockRecorder
}

// MockGitHubAppsAdapterMockRecorder is the mock recorder for MockGitHubAppsAdapter
type MockGitHubAppsAdapterMockRecorder struct {
	mock *MockGitHubAppsAdapter
}

// NewMockGitHubAppsAdapter creates a new mock instance
func NewMockGitHubAppsAdapter(ctrl *gomock.Controller) *MockGitHubAppsAdapter {
	mock := &MockGitHubAppsAdapter{ctrl: ctrl}
	mock.recorder = &MockGitHubAppsAdapterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGitHubAppsAdapter) EXPECT() *MockGitHubAppsAdapterMockRecorder {
	return m.recorder
}

// NewAppClient mocks base method
func (m *MockGitHubAppsAdapter) NewAppClient() githubapi.Client {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewAppClient")
	ret0, _ := ret[0].(githubapi.Client)
	return ret0
}

// NewAppClient indicates an expected call of NewAppClient
func (mr *MockGitHubAppsAdapterMockRecorder) NewAppClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewAppClient", reflect.TypeOf((*MockGitHubAppsAdapter)(nil).NewAppClient))
}

// NewInstallationClient mocks base method
func (m *MockGitHubAppsAdapter) NewInstallationClient(arg0 int64) githubapi.Client {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewInstallationClient", arg0)
	ret0, _ := ret[0].(githubapi.Client)
	return ret0
}

// NewInstallationClient indicates an expected call of NewInstallationClient
func (mr *MockGitHubAppsAdapterMockRecorder) NewInstallationClient(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewInstallationClient", reflect.TypeOf((*MockGitHubAppsAdapter)(nil).NewInstallationClient), arg0)
}

// NewUserClient mocks base method
func (m *MockGitHubAppsAdapter) NewUserClient(arg0 context.Context, arg1 string) githubapi.Client {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewUserClient", arg0, arg1)
	ret0, _ := ret[0].(githubapi.Client)
	return ret0
}

// NewUserClient indicates an expected call of NewUserClient
func (mr *MockGitHubAppsAdapterMockRecorder) NewUserClient(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewUserClient", reflect.TypeOf((*MockGitHubAppsAdapter)(nil).NewUserClient), arg0, arg1)
}
