interface RepositoryOwner {
  login: String!
}

type User implements RepositoryOwner {
  login: String!
}

type Organization implements RepositoryOwner {
  login: String!
}

type Installation {
  id: Int!
  installedRepositories: [Repository!]!
}

type Repository {
  id: Int!
  name: String!
  fullName: String!
  owner: RepositoryOwner!
  config: RepositoryConfig
}

type RepositoryConfig {
  schedules: MergeChanceSchedules!
  mergeAvailable: Boolean!
}

type Visitor {
  login: String!
  installations: [Installation!]!
}

type Query {
  visitor: Visitor!
  repository(owner: String!, name: String!): Repository
}

type MergeChanceSchedules {
  sunday: MergeChanceSchedule
  monday: MergeChanceSchedule
  tuesday: MergeChanceSchedule
  wednesday: MergeChanceSchedule
  thursday: MergeChanceSchedule
  friday: MergeChanceSchedule
  saturday: MergeChanceSchedule
}

type MergeChanceSchedule {
  startHour: Int!
  stopHour: Int!
}

input RepositoryConfigToUpdate {
  schedules: MergeChanceSchedulesToUpdate!
  mergeAvailable: Boolean!
}

input MergeChanceSchedulesToUpdate {
  sunday: MergeChanceScheduleToUpdate
  monday: MergeChanceScheduleToUpdate
  tuesday: MergeChanceScheduleToUpdate
  wednesday: MergeChanceScheduleToUpdate
  thursday: MergeChanceScheduleToUpdate
  friday: MergeChanceScheduleToUpdate
  saturday: MergeChanceScheduleToUpdate
}

input MergeChanceScheduleToUpdate {
  startHour: Int!
  stopHour: Int!
}

type Mutation {
  updateRepositoryConfig(owner: String!, name: String!, config: RepositoryConfigToUpdate!): Boolean!
}
