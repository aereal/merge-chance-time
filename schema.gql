interface RepositoryOwner {
  login: String!
}

type User implements RepositoryOwner {
  login: String!
}

type Organization implements RepositoryOwner {
  login: String!
}

type Installation {
  id: Int!
  installedRepositories: [Repository!]!
}

type Repository {
  id: Int!
  name: String!
  fullName: String!
  owner: RepositoryOwner!
  config: RepositoryConfig
}

type RepositoryConfig {
  startSchedule: String!
  stopSchedule: String!
  mergeAvailable: Boolean!
}

type Visitor {
  login: String!
  installations: [Installation!]!
}

type Query {
  visitor: Visitor!
  repository(owner: String!, name: String!): Repository
}

input RepositoryConfigToUpdate {
  startSchedule: String
  stopSchedule: String
}

type Mutation {
  updateRepositoryConfig(owner: String!, name: String!, config: RepositoryConfigToUpdate!): Boolean!
}
