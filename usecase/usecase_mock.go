// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aereal/merge-chance-time/usecase (interfaces: Usecase)

// Package usecase is a generated GoMock package.
package usecase

import (
	context "context"
	githubapi "github.com/aereal/merge-chance-time/app/adapter/githubapi"
	githubapps "github.com/aereal/merge-chance-time/app/adapter/githubapps"
	gomock "github.com/golang/mock/gomock"
	github "github.com/google/go-github/v30/github"
	reflect "reflect"
	time "time"
)

// MockUsecase is a mock of Usecase interface
type MockUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockUsecaseMockRecorder
}

// MockUsecaseMockRecorder is the mock recorder for MockUsecase
type MockUsecaseMockRecorder struct {
	mock *MockUsecase
}

// NewMockUsecase creates a new mock instance
func NewMockUsecase(ctrl *gomock.Controller) *MockUsecase {
	mock := &MockUsecase{ctrl: ctrl}
	mock.recorder = &MockUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUsecase) EXPECT() *MockUsecaseMockRecorder {
	return m.recorder
}

// OnDeleteAppFromOwner mocks base method
func (m *MockUsecase) OnDeleteAppFromOwner(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OnDeleteAppFromOwner", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// OnDeleteAppFromOwner indicates an expected call of OnDeleteAppFromOwner
func (mr *MockUsecaseMockRecorder) OnDeleteAppFromOwner(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnDeleteAppFromOwner", reflect.TypeOf((*MockUsecase)(nil).OnDeleteAppFromOwner), arg0, arg1)
}

// OnInstallRepositories mocks base method
func (m *MockUsecase) OnInstallRepositories(arg0 context.Context, arg1 []*github.Repository) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OnInstallRepositories", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// OnInstallRepositories indicates an expected call of OnInstallRepositories
func (mr *MockUsecaseMockRecorder) OnInstallRepositories(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnInstallRepositories", reflect.TypeOf((*MockUsecase)(nil).OnInstallRepositories), arg0, arg1)
}

// OnRemoveRepositories mocks base method
func (m *MockUsecase) OnRemoveRepositories(arg0 context.Context, arg1 []*github.Repository) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OnRemoveRepositories", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// OnRemoveRepositories indicates an expected call of OnRemoveRepositories
func (mr *MockUsecaseMockRecorder) OnRemoveRepositories(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnRemoveRepositories", reflect.TypeOf((*MockUsecase)(nil).OnRemoveRepositories), arg0, arg1)
}

// UpdateChanceTime mocks base method
func (m *MockUsecase) UpdateChanceTime(arg0 context.Context, arg1 githubapps.GitHubAppsAdapter, arg2 time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateChanceTime", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateChanceTime indicates an expected call of UpdateChanceTime
func (mr *MockUsecaseMockRecorder) UpdateChanceTime(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateChanceTime", reflect.TypeOf((*MockUsecase)(nil).UpdateChanceTime), arg0, arg1, arg2)
}

// UpdatePullRequestCommitStatus mocks base method
func (m *MockUsecase) UpdatePullRequestCommitStatus(arg0 context.Context, arg1 githubapi.Client, arg2 *github.PullRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePullRequestCommitStatus", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePullRequestCommitStatus indicates an expected call of UpdatePullRequestCommitStatus
func (mr *MockUsecaseMockRecorder) UpdatePullRequestCommitStatus(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePullRequestCommitStatus", reflect.TypeOf((*MockUsecase)(nil).UpdatePullRequestCommitStatus), arg0, arg1, arg2)
}
